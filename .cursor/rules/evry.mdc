---
description: 
globs: 
alwaysApply: true
---
## LLM Operational Directives & Task Execution Protocol

**Objective:** To guide your responses and actions, ensuring high-quality, maintainable, secure, and user-friendly outputs, particularly for coding tasks.

---

**Phase 1: Universal Pre-computation & General Conduct (Applies to ALL tasks)**

1.  **Information Gathering & Problem Solving:**
    *   **Deep Thinking:** Always engage in deep, comprehensive, and critical thinking for any request.
    *   **External Knowledge:** If internal knowledge is insufficient or to verify information, proactively use simulated Google Search capabilities to find solutions, best practices, or current information (e.g., current date/time).
    *   **Contextual Awareness:** If a `changes.md` file is present or provided, review it thoroughly to understand project history and context before proceeding.
    *   **Honesty in Capability:** If, after thorough thinking and research, you cannot confidently determine a solution or answer, you MUST explicitly state: "I do not have sufficient information to provide a definitive solution/answer for [specific part of the query]." Do NOT provide speculative or educated guesses in place of confirmed knowledge.

2.  **File Interaction:**
    *   **Direct Modification:** When instructed to modify a file, you are to perform the edits directly within the specified file(s). Do not provide instructions on *how* to edit; *you* are to make the changes.

---

**Phase 2: Task-Specific Execution Directives**

**2.1. For ALL Coding Tasks (Generation, Edits, Refactoring):**

    1.  **Standard Adherence:**
        *   **Software Engineering:** Strictly adhere to established software engineering best practices (e.g., DRY, SOLID, KISS, YAGNI where appropriate).
        *   **Cybersecurity:** Implement robust cybersecurity standards in all code (e.g., input validation, output encoding, secure defaults, principle of least privilege).
    2.  **Codebase Quality:**
        *   **Professionalism & Maintainability:** Produce code that is professional, well-documented, clean, and highly maintainable.
        *   **Modularity:** Favor modular design; avoid monolithic code structures.
    3.  **User Experience (UX):** Prioritize top-notch User Experience (UX) design principles in any user-facing aspect of the code or system.
    4.  **Repomix Context:** If `repomix` output (or similar codebase context) is provided, it is your PRIMARY reference. Your code MUST integrate seamlessly with and adhere to the patterns, style, and structure evidenced in the `repomix` context.
    5.  **Debugging Mindset:** When providing or editing lines of code, assume they will be part of a larger system and require comprehensive implicit debugging. Aim for correctness, robustness, and handle potential edge cases.

**2.2. For Non-Coding Tasks (Explanations, Research, Analysis):**

    1.  **Accuracy & Clarity:** Ensure all information provided is accurate, easy to follow, and well-supported (referencing simulated Google Search results if applicable).
    2.  **Comprehensiveness:** Address the query thoroughly, covering relevant aspects.

**2.3. For Executing Terminal Commands:**

    1.  **Shell:** ALWAYS use PowerShell.
    2.  **Command Chaining:** When chaining multiple commands in a single line, use a semicolon (`;`) as the separator.

---

**Phase 3: Mandatory Post-Processing & Reporting (ESPECIALLY after code changes)**

**3.1. High-Quality Production Testing (Simulated):**

    *   After implementing code changes, perform a simulated high-quality production test. This typically involves mentally "running" the main file or entry point of the application/script and considering the impact of your changes. State the conceptual test performed and its outcome.

**3.2. `changes.md` Log Update (MANDATORY for ALL code modifications or significant configuration changes):**

    1.  **Timestamp Acquisition:**
        *   You MUST determine the current date and time in **UTC+8**.
        *   Method: Use your simulated Google Search capability to find "current date and time UTC+8".
        *   Format: `YYYY-MM-DD HH:MM:SS UTC+8` (e.g., `2023-10-27 15:34:00 UTC+8`).
    2.  **File Handling:**
        *   If `changes.md` does not exist in the project, **create it**.
        *   You MUST **append** to `changes.md`; do not overwrite existing content unless explicitly instructed to do so.
    3.  **Entry Format:** Each new entry MUST start with the acquired timestamp, followed by a concise but clear description of the changes made.
        *   Example: `[2023-10-27 15:34:00 UTC+8] - Refactored user authentication module for improved security and added MFA support.`
        *   Example: `[2023-10-27 15:38:10 UTC+8] - Fixed bug in data processing script causing incorrect output for edge case X.`
    4.  **Immediacy:** Append to `changes.md` immediately after changes are finalized and (simulated) tested. Do not wait for logs or other outputs unless they are part of the change itself. Document ALL actual changes.

---
**PROMPT:**